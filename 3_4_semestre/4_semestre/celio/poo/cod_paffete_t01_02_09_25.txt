import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.text.MaskFormatter;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import javax.imageio.ImageIO;

public class CadastroFuncionariosTrabalhoResponsivo extends JFrame {

    // ===== Campos que a validação usa =====
    private JFormattedTextField txtCPF;
    private JTextField txtNome;
    private JFormattedTextField txtDataNasc;
    private JTextField txtEmail;
    private JTextField txtSalario;

    // Foto
    private JLabel lblFoto;
    private Image fotoOriginal; // guardo a imagem original p/ reescalar no resize

    public CadastroFuncionariosTrabalhoResponsivo() {
        super("Funcionários");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Look and Feel
        try {
            for (UIManager.LookAndFeelInfo i : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(i.getName())) { UIManager.setLookAndFeel(i.getClassName()); break; }
            }
        } catch (Exception ignored) {}

        setLayout(new BorderLayout());

        // ====== Menu ======
        JMenuBar bar = new JMenuBar();
        JMenu mArq = new JMenu("Arquivo");
        JMenuItem miSair = new JMenuItem("Sair");
        miSair.addActionListener(e -> dispose());
        mArq.add(miSair);
        JMenu mAjuda = new JMenu("Ajuda");
        JMenuItem miSobre = new JMenuItem("Sobre");
        miSobre.addActionListener(e -> JOptionPane.showMessageDialog(this,
                "Cadastro de Funcionários (Swing)\nVersão responsiva (scroll + redimensionamento de foto).",
                "Sobre", JOptionPane.INFORMATION_MESSAGE));
        mAjuda.add(miSobre);
        bar.add(mArq); bar.add(mAjuda);
        setJMenuBar(bar);

        // ====== Topo: barra de ações ======
        JPanel topo = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 8));
        topo.add(new JLabel("Status:"));
        JComboBox<String> cmbStatus = new JComboBox<>(new String[]{"Aberta","Pendente","Fechada"});
        topo.add(cmbStatus);

        JButton btnSalvar = new JButton("Salvar");
        btnSalvar.addActionListener(e -> validar());
        topo.add(btnSalvar);

        topo.add(new JButton("Concluir"));
        topo.add(new JButton("Excluir"));
        topo.add(new JButton("Ocorrência"));
        topo.add(new JLabel("Situação:"));
        JLabel lblAtivo = new JLabel("Ativo");
        lblAtivo.setForeground(new Color(22,130,46));
        topo.add(lblAtivo);

        JButton btnFechar = new JButton("Fechar");
        btnFechar.addActionListener(e -> dispose());
        topo.add(Box.createHorizontalStrut(20));
        topo.add(btnFechar);
        add(topo, BorderLayout.NORTH);

        // ====== Centro: cabeçalho + abas (cada aba com scroll) ======
        JPanel centro = new JPanel(new BorderLayout());
        add(centro, BorderLayout.CENTER);

        // Cabeçalho (CPF / Nome)
        JPanel cab = new JPanel(new GridLayout(2, 2, 8, 4));
        cab.setBorder(BorderFactory.createEmptyBorder(8, 10, 8, 10));
        cab.add(new JLabel("CPF"));
        txtCPF = mask("###.###.###-##");
        cab.add(txtCPF);
        cab.add(new JLabel("Nome"));
        txtNome = new JTextField(50);
        cab.add(txtNome);
        centro.add(cab, BorderLayout.NORTH);

        // Abas com scroll (responsivo)
        JTabbedPane tabs = new JTabbedPane();
        tabs.addTab("Principal", scroll(abaPrincipal()));
        tabs.addTab("Documentação", scroll(abaDocumentacao()));
        tabs.addTab("Contrato", scroll(abaContrato()));
        tabs.addTab("Operacional", scroll(abaOperacional())); // foto redimensiona
        centro.add(tabs, BorderLayout.CENTER);

        // ===== Janela proporcional à resolução =====
        Dimension scr = Toolkit.getDefaultToolkit().getScreenSize();
        setMinimumSize(new Dimension(900, 600));
        setPreferredSize(new Dimension((int)(scr.width * 0.9), (int)(scr.height * 0.9)));
        pack();
        setLocationRelativeTo(null);
    }

    // -------- helper: envolve painel em JScrollPane --------
    private JScrollPane scroll(JComponent inner) {
        JScrollPane sp = new JScrollPane(inner);
        sp.getVerticalScrollBar().setUnitIncrement(16);
        sp.setBorder(BorderFactory.createEmptyBorder()); // sem borda dupla
        return sp;
    }

    // ================= ABA PRINCIPAL =================
    private JPanel abaPrincipal() {
        JPanel aba = new JPanel(new GridLayout(3, 1, 8, 8));
        aba.setBorder(BorderFactory.createEmptyBorder(8, 10, 10, 10));

        JPanel dadosGerais = bloco("Dados Gerais", 4);
        dadosGerais.add(linha("Empresa", new JComboBox<>(new String[]{"1000 - EMPRESA RH"})));
        dadosGerais.add(linha("Divisão RH", new JComboBox<>(new String[]{"1001 - ADMINISTRACAO"})));
        dadosGerais.add(linha("Matrícula", new JTextField(10)));
        dadosGerais.add(linha("Funcionário", new JTextField(35)));
        aba.add(dadosGerais);

        JPanel endereco = bloco("Endereço", 5);
        endereco.add(linha("CEP", mask("#####-###")));
        endereco.add(linha("Endereço", new JTextField(36)));
        endereco.add(linhaDupla("Nº", new JTextField(6), "Bairro", new JTextField(22)));
        endereco.add(linha("Município", new JTextField(24)));
        JPanel telEmail = linhaTripla("Telefone", mask("(##)####-####"),
                "Telefone Cel.", mask("(##)#####-####"),
                "Email", new JTextField(30));
        txtEmail = (JTextField)((Container)telEmail).getComponent(5);
        endereco.add(telEmail);
        aba.add(endereco);

        JPanel pessoais = bloco("Dados Pessoais", 4);
        pessoais.add(linha("Sexo", new JComboBox<>(new String[]{"Feminino","Masculino","Não informar"})));
        txtDataNasc = mask("##/##/####");
        pessoais.add(linhaDupla("Data Nascimento", txtDataNasc,
                "Estado Civil", new JComboBox<>(new String[]{"Solteiro","Casado","Divorciado","Viúvo"})));

        JPanel fili = bloco("Filiação", 2);
        fili.add(linha("Pai", new JTextField(24)));
        fili.add(linha("Mãe", new JTextField(24)));
        pessoais.add(fili);

        JPanel nat = new JPanel(new GridLayout(2,1,6,6));
        nat.setBorder(new TitledBorder(""));
        nat.add(linhaDupla("Naturalidade", new JTextField(18),
                "Nacionalidade", new JTextField(18)));
        nat.add(linhaDupla("Grau de Instrução", new JComboBox<>(new String[]{
                        "Fundamental","Médio","Superior completo","Pós","Mestrado"}),
                "Formação", new JTextField(18)));
        pessoais.add(nat);

        aba.add(pessoais);
        return aba;
    }

    // ================= ABA DOCUMENTAÇÃO =================
    private JPanel abaDocumentacao() {
        JPanel aba = new JPanel(new GridLayout(1, 2, 8, 8));
        aba.setBorder(BorderFactory.createEmptyBorder(8, 10, 10, 10));

        JPanel esq = new JPanel(new GridLayout(4, 1, 8, 8));
        esq.add(grupoRG());
        esq.add(grupoInfoMilitar());
        esq.add(grupoCNH());
        esq.add(grupoConselho());

        JPanel dir = new JPanel(new GridLayout(5, 1, 8, 8));
        dir.add(grupoCTPS());
        dir.add(grupoCPF());
        dir.add(grupoPIS());
        dir.add(grupoTitulo());
        dir.add(grupoRIC());

        aba.add(esq);
        aba.add(dir);
        return aba;
    }

    // ================= ABA CONTRATO =================
    private JPanel abaContrato() {
        JPanel aba = new JPanel(new GridLayout(1, 2, 8, 8));
        aba.setBorder(BorderFactory.createEmptyBorder(8, 10, 10, 10));

        JPanel esq = new JPanel(new GridLayout(5, 1, 8, 8));
        JPanel vinc = bloco("", 4); vinc.setBorder(new TitledBorder(""));
        vinc.add(linha("Vínculo", new JComboBox<>(new String[]{
                "15 - Trabalhador urbano vinculado a empregador pessoa física por contrato indeterminado"})));
        vinc.add(linhaDupla("Tipo de Admissão", new JComboBox<>(new String[]{"Normal","Readmissão","Transferência"}),
                "Reemprego", new JComboBox<>(new String[]{"Não","Sim"})));
        vinc.add(linhaDupla("Data Admissão", mask("##/##/####"), "Tipo de Salário",
                new JComboBox<>(new String[]{"Mensal","Semanal","Diário","Hora"})));
        vinc.add(linhaDupla("Horário", new JComboBox<>(new String[]{"GERAL"}), "Hrs. Sem.", new JTextField(6)));
        esq.add(vinc);

        JPanel fgtsAtv = bloco("", 2); fgtsAtv.setBorder(new TitledBorder(""));
        fgtsAtv.add(linhaDupla("FGTS", new JComboBox<>(new String[]{"Optante","Não Optante"}), "Data Opção", mask("##/##/####")));
        JPanel radios = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        radios.add(new JLabel("Atividade Desenvolvida"));
        JRadioButton urbana = new JRadioButton("Urbana", true);
        JRadioButton rural = new JRadioButton("Rural");
        ButtonGroup bg = new ButtonGroup(); bg.add(urbana); bg.add(rural);
        radios.add(urbana); radios.add(rural);
        fgtsAtv.add(radios);
        esq.add(fgtsAtv);

        JPanel adiant = bloco("Adiantamento Quinzenal", 1);
        adiant.add(linhaTripla("Adiantamento", new JComboBox<>(new String[]{"Sim","Não"}),
                "Percentual", new JTextField(6),
                "Valor Fixo", new JTextField(8)));
        esq.add(adiant);

        JPanel exp = bloco("Experiência", 1);
        exp.add(linhaDupla("Vencimento", mask("##/##/####"), "Prorrogação", mask("##/##/####")));
        esq.add(exp);

        JPanel salario = bloco("", 1); salario.setBorder(new TitledBorder(""));
        txtSalario = new JTextField(10);
        salario.add(linhaDupla("Valor Salário", txtSalario,
                "Tipo de Reajuste", new JComboBox<>(new String[]{"Variável","Anual","Convenção"})));
        esq.add(salario);

        JPanel dir = new JPanel(new GridLayout(2, 1, 8, 8));
        JPanel cargo = bloco("", 4); cargo.setBorder(new TitledBorder(""));
        cargo.add(linha("Cargo", new JTextField(26)));
        cargo.add(linha("Departamento", new JTextField(26)));
        cargo.add(linha("Categoria GFIP", new JComboBox<>(new String[]{
                "11 - Contribuinte individual - Diretor não empregado e demais"})));
        cargo.add(linha("Tipo Contrato", new JComboBox<>(new String[]{
                "Prazo indeterminado","Prazo determinado","Aprendiz"})));
        dir.add(cargo);

        JPanel resc = bloco("Rescisão", 3);
        resc.add(linhaDupla("Data Demissão", mask("##/##/####"), "Motivo Demissão", new JTextField(18)));
        JPanel pAviso = new JPanel(new FlowLayout(FlowLayout.LEFT)); pAviso.add(new JCheckBox("Aviso Prévio"));
        resc.add(pAviso);
        resc.add(linhaTripla("Data Aviso Início", mask("##/##/####"),
                "Data Aviso Fim", mask("##/##/####"),
                "Motivo RAIS", new JTextField(16)));
        dir.add(resc);

        aba.add(esq);
        aba.add(dir);
        return aba;
    }

    // ================= ABA OPERACIONAL (FOTO RESPONSIVA) =================
    private JPanel abaOperacional() {
        JPanel aba = new JPanel(new GridLayout(1, 2, 8, 8));
        aba.setBorder(BorderFactory.createEmptyBorder(8, 10, 10, 10));

        JPanel esquerda = new JPanel(new GridLayout(3, 1, 8, 8));

        JPanel chk1 = bloco("", 3); chk1.setBorder(new TitledBorder(""));
        chk1.add(checkLinha(new JCheckBox("INSS", true), new JCheckBox("Vale Transporte")));
        chk1.add(checkLinha(new JCheckBox("FGTS", true), new JCheckBox("Vale Refeição", true)));
        chk1.add(checkLinha(new JCheckBox("IRRF", true), new JCheckBox("Plano de Saúde")));
        esquerda.add(chk1);

        JPanel chk2 = bloco("", 3); chk2.setBorder(new TitledBorder(""));
        chk2.add(new JCheckBox("Reembolso INSS/IRRF"));
        chk2.add(new JCheckBox("Empregado Doméstico"));
        chk2.add(new JCheckBox("Benefício Previdência - Aposentadoria"));
        esquerda.add(chk2);

        JPanel racaDef = bloco("", 2); racaDef.setBorder(new TitledBorder(""));
        racaDef.add(linha("Raça Cor", new JComboBox<>(new String[]{"Branca","Preta","Parda","Amarela","Indígena","Não Informar"})));
        racaDef.add(linha("Tipo de Deficiência", new JComboBox<>(new String[]{"0","1","2","3","4","5"})));
        esquerda.add(racaDef);

        JPanel direita = new JPanel(new GridLayout(4, 1, 8, 8));

        JPanel sind = bloco("Sindicato", 1);
        sind.add(linhaDupla("Sindicato", new JTextField(24),
                "Mês Dissídio", new JComboBox<>(new String[]{
                        "Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho",
                        "Agosto","Setembro","Outubro","Novembro","Dezembro"})));
        direita.add(sind);

        JPanel dados = bloco("Dados Funcionário", 2);
        dados.add(linha("Forma de Pagamento", new JComboBox<>(new String[]{
                "Crédito em Conta","Débito em Conta","Dinheiro","Cheque"})));
        JPanel bancoLinha = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        bancoLinha.add(new JLabel("Banco"));
        bancoLinha.add(new JComboBox<>(new String[]{"Banco do Brasil","Bradesco","Caixa","Itaú","Santander"}));
        bancoLinha.add(new JLabel("Agência"));
        bancoLinha.add(new JTextField(8));
        bancoLinha.add(new JLabel("Número Conta"));
        bancoLinha.add(new JTextField(12));
        dados.add(bancoLinha);
        direita.add(dados);

        JPanel exames = bloco("Exames Admissionais", 2);
        exames.add(linha("Nome Médico", new JTextField(26)));
        exames.add(linhaDupla("CRM", new JTextField(10), "Data Exame", mask("##/##/####")));
        direita.add(exames);

        // FOTO – responsiva
        JPanel foto = bloco("Foto", 2);
        lblFoto = new JLabel("sem foto", SwingConstants.CENTER);
        lblFoto.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        // tamanho mínimo para não sumir
        lblFoto.setMinimumSize(new Dimension(140, 160));
        // no começo, preferido 140x160; depois cresce junto com o layout
        lblFoto.setPreferredSize(new Dimension(160, 180));
        JPanel fotoBox = new JPanel(new GridBagLayout()); // centraliza sempre
        fotoBox.add(lblFoto);
        foto.add(fotoBox);

        JPanel botoesFoto = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        JButton btnSel = new JButton("Selecionar");
        JButton btnLimpar = new JButton("Limpar");
        btnSel.addActionListener(e -> selecionarFoto());
        btnLimpar.addActionListener(e -> { fotoOriginal = null; lblFoto.setIcon(null); lblFoto.setText("sem foto"); });
        botoesFoto.add(btnSel); botoesFoto.add(btnLimpar);
        foto.add(botoesFoto);
        direita.add(foto);

        // quando a label de foto for redimensionada, reescala a imagem
        lblFoto.addComponentListener(new ComponentAdapter() {
            @Override public void componentResized(ComponentEvent e) { renderFoto(); }
        });

        aba.add(esquerda);
        aba.add(direita);
        return aba;
    }

    // ============ renderiza a foto de acordo com o tamanho atual do label ============
    private void renderFoto() {
        if (fotoOriginal == null) return;
        int w = Math.max(lblFoto.getWidth(), 140);
        int h = Math.max(lblFoto.getHeight(), 160);
        if (w > 0 && h > 0) {
            Image scaled = fotoOriginal.getScaledInstance(w, h, Image.SCALE_SMOOTH);
            lblFoto.setIcon(new ImageIcon(scaled));
            lblFoto.setText(null);
        }
    }

    // =================== Validação ===================
    private void validar() {
        StringBuilder erros = new StringBuilder();

        String cpf = txtCPF.getText().replaceAll("[^0-9]", "");
        if (txtNome.getText().trim().isEmpty()) erros.append("• Nome é obrigatório.\n");
        if (cpf.length() != 11) erros.append("• CPF deve ter 11 dígitos.\n");

        if (txtEmail != null) {
            String email = txtEmail.getText().trim();
            if (email.isEmpty() || !email.contains("@") || email.startsWith("@") || email.endsWith("@")) {
                erros.append("• Email inválido.\n");
            }
        }
        if (txtDataNasc != null) {
            String dn = txtDataNasc.getText();
            DateTimeFormatter f = DateTimeFormatter.ofPattern("dd/MM/uuuu");
            try {
                LocalDate d = LocalDate.parse(dn, f);
                if (d.isAfter(LocalDate.now())) erros.append("• Data de nascimento no futuro.\n");
            } catch (DateTimeParseException ex) {
                erros.append("• Data de nascimento inválida (dd/MM/aaaa).\n");
            }
        }
        if (txtSalario != null) {
            String s = txtSalario.getText().trim().replace(",", ".");
            try {
                BigDecimal val = new BigDecimal(s);
                if (val.signum() <= 0) erros.append("• Valor Salário deve ser > 0.\n");
            } catch (Exception ex) {
                erros.append("• Valor Salário inválido.\n");
            }
        }

        if (erros.length() > 0)
            JOptionPane.showMessageDialog(this, erros.toString(), "Erros de validação", JOptionPane.WARNING_MESSAGE);
        else
            JOptionPane.showMessageDialog(this, "Dados validados com sucesso! (simulação de salvar)",
                    "OK", JOptionPane.INFORMATION_MESSAGE);
    }

    // =================== Foto ===================
    private void selecionarFoto() {
        try {
            JFileChooser fc = new JFileChooser();
            if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File f = fc.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                if (img != null) {
                    fotoOriginal = img; // guarda original
                    renderFoto();       // exibe conforme o tamanho atual do label
                } else {
                    JOptionPane.showMessageDialog(this, "Arquivo inválido.");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar imagem.");
        }
    }

    // =================== Helpers UI ===================
    private JPanel bloco(String titulo, int linhas) {
        JPanel p = new JPanel(new GridLayout(linhas, 1, 6, 6));
        p.setBorder(BorderFactory.createTitledBorder(titulo));
        return p;
    }
    private JPanel linha(String rotulo, JComponent campo) {
        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        p.add(new JLabel(rotulo)); p.add(campo);
        return p;
    }
    private JPanel linhaDupla(String r1, JComponent c1, String r2, JComponent c2) {
        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        p.add(new JLabel(r1)); p.add(c1);
        p.add(new JLabel(r2)); p.add(c2);
        return p;
    }
    private JPanel linhaTripla(String r1, JComponent c1, String r2, JComponent c2, String r3, JComponent c3) {
        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        p.add(new JLabel(r1)); p.add(c1);
        p.add(new JLabel(r2)); p.add(c2);
        p.add(new JLabel(r3)); p.add(c3);
        return p;
    }
    private JPanel checkLinha(JCheckBox a, JCheckBox b) {
        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        p.add(a); p.add(b);
        return p;
    }
    private JFormattedTextField mask(String padrao) {
        try {
            MaskFormatter mf = new MaskFormatter(padrao);
            mf.setPlaceholderCharacter('_');
            return new JFormattedTextField(mf);
        } catch (Exception e) {
            return new JFormattedTextField();
        }
    }
    private JPanel grupoRG() {
        JPanel g = bloco("RG", 2);
        g.add(linha("Número", new JTextField(12)));
        JPanel l = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        l.add(new JLabel("Orgão Expedidor"));
        l.add(new JComboBox<>(new String[]{"SSP","DGPC","DETRAN","IFP","OAB"}));
        l.add(new JLabel("UF")); l.add(comboUF());
        l.add(new JLabel("Data Expedição")); l.add(mask("##/##/####"));
        g.add(l);
        return g;
    }
    private JPanel grupoCTPS() {
        JPanel g = bloco("CTPS", 2);
        g.add(linha("Número", new JTextField(12)));
        JPanel l = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        l.add(new JLabel("Série")); l.add(new JTextField(8));
        l.add(new JLabel("Orgão")); l.add(new JTextField(8));
        l.add(new JLabel("UF")); l.add(comboUF());
        g.add(l);
        return g;
    }
    private JPanel grupoInfoMilitar() {
        JPanel g = bloco("Informação Militar", 2);
        g.add(linha("Situação", new JComboBox<>(new String[]{"Dispensado","Reservista","Isento"})));
        JPanel l = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        l.add(new JLabel("Número")); l.add(new JTextField(12));
        l.add(new JLabel("Categoria")); l.add(new JTextField(10));
        l.add(new JLabel("Data Baixa")); l.add(mask("##/##/####"));
        g.add(l);
        return g;
    }
    private JPanel grupoCPF() {
        JPanel g = bloco("CPF", 1);
        g.add(linha("Número", mask("###.###.###-##")));
        return g;
    }
    private JPanel grupoPIS() {
        JPanel g = bloco("PIS", 1);
        JPanel l = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        l.add(new JLabel("Número")); l.add(mask("###.#####.##-#"));
        l.add(new JLabel("Data Cadastro")); l.add(mask("##/##/####"));
        g.add(l);
        return g;
    }
    private JPanel grupoCNH() {
        JPanel g = bloco("CNH", 2);
        g.add(linhaDupla("Número", new JTextField(16), "Categoria", new JComboBox<>(new String[]{"A","B","C","D","E","AB"})));
        g.add(linhaDupla("Data Cadastro", mask("##/##/####"), "Data Vencimento", mask("##/##/####")));
        return g;
    }
    private JPanel grupoTitulo() {
        JPanel g = bloco("Título de Eleitor", 2);
        g.add(linha("Número", new JTextField(16)));
        g.add(linhaDupla("Zona", new JTextField(6), "Seção", new JTextField(6)));
        return g;
    }
    private JPanel grupoConselho() {
        JPanel g = bloco("Conselho Regional", 1);
        JPanel l1 = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        l1.add(new JLabel("Número")); l1.add(new JTextField(12));
        l1.add(new JLabel("Sigla")); l1.add(new JTextField(6));
        l1.add(new JLabel("Reg. Região")); l1.add(new JTextField(10));
        g.add(l1);
        return g;
    }
    private JPanel grupoRIC() {
        JPanel g = bloco("RIC", 2);
        g.add(linha("Número", new JTextField(16)));
        JPanel l = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 4));
        l.add(new JLabel("Orgão Expedidor")); l.add(new JTextField(14));
        l.add(new JLabel("Data Expedição")); l.add(mask("##/##/####"));
        g.add(l);
        return g;
    }
    private JComboBox<String> comboUF() {
        return new JComboBox<>(new String[]{
                "AC","AL","AP","AM","BA","CE","DF","ES","GO","MA","MG","MS","MT",
                "PA","PB","PE","PI","PR","RJ","RN","RO","RR","RS","SC","SE","SP","TO"
        });
    }

    // =================== Main ===================
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new CadastroFuncionariosTrabalhoResponsivo().setVisible(true));
    }
}
