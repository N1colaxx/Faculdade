    Temos 3 siglas para o java: JVM - JRE - JDK

    JVM (Java Virtual Machine):
        A JVM é responsavel por interpretar e executar o codigo java compilado (bycode), 
        dessa forma o aplicativo conversa com o sistema operacional. o que possibilita 
        que aplicativos Java sejam multiplataforma.

    JRE (Java Runtime Environment):
        JRE (Ambiente de tempo de execução Java) é composto pela JVM (máquina virtual 
        java) e pela biblioteca de classes Java, utilizadas para execução de aplicações java. 
        Essas bibliotecas são chamadas de APIs Java. Portanto, o JRE é necessário
        para que possamos executar uma aplicação java
    
    JDK (Java Development Kit):
        JDK é o conjunto de ferramentas necessárias para realizar o desenvolvimento de 
        aplicações java, e inclui a JRE e ferramentas de programação, como: 
        javac – compilador 
        jar – empacotador 
        javadoc – ferramenta para geração de documentação 
        jdb - depurador 
    

Tipo Primitivos Java:
a    N° com virgula:
        -   float              32 bits
        -   double             64 bits

    Caractere:
        -   char               16 bits

    booleano:
        -   booleano            1 bit


Operadores logiscos:
    
    Opração         Operador 
        E               &
        Ou              |
      Negação           !
      Ou Exclusivo      ^ 

        &&  (E condicional (SE x = Verdade e somente SE y = Verdade, res = true)    ) 
        ||  (OU condicional (SE x = Verdade ou y = Verdade, res = true )    ) 
        ^   (OU Exclusivo logico booleano ( (SE x = False E y = False) res= False, (SE x = False E y = Verdade) res = Verdade)) se apenas um dos operandos for verdadeiro, mas não ambos.
        |   (OU inclusivo logico booleano) 
        &   (E logico booleano (SE x E y for iguais, res = true)    )
        !  (Não logico)


Operadores de Incremento:

    Operador	    Descrição	        Ordem de Execução
    ++op	     Pré-incremento	    Incrementa antes de usar
    op++	     Pós-incremento	    Usa e depois incrementa
    --op	     Pré-decremento	    Decrementa antes de usar
    op--	     Pós-decremento	    Usa e depois decrementa


Conversão de String
    • É possível converter String para qualquer 
    tipo primitivo
    o int – Integer.parseInt( string )
    o Float – Float.parseFloat( string )
    o Double - Double.parseFloat( string )


Instrução de seleção:
    if(condicao){
        //executa se a CONDIÇÂO for verdae
    }

    if (condicao) {
        // Executa este bloco se a condição for verdadeira.
    } else {
        // Executa este bloco se a condição for falsa.
    }

    switch(condicao){
        case,
        case,
        defalt}


    Operador condicional ( ? : ):
    Único operador ternário do Java (recebe três operandos);
        variavel = (condicao) ? valor_se_true : valor_se_false;


Laços de Repetição:
    for()

    while();

    do while();



Array:

    Para declarar um array ->
        tipo [] nome;  OU   tipo nome[];
        
        Existe uma classe que auxilia a utilização de array, que está localizada no pacote  java.util, tem o nome de 
        Arrays, e possui os seguintes métodos: 
            • binarySearch – permite uma pesquisa nos elementos de um determinado array ordenado, 
            retornando um atributo inteiro com a posição deste elemento;  
            • equal – permite a comparação entre dois arrays, retornando um booleao verdadeiro(true), caso os 
            array sejam iguais;  
            • fill – realiza o preenchimento de todos os elementos de um determinado array;  
            • sort – faz uma ordenação nos elementos de um determinado array;  
            • toString – mostra os elementos de um determinado array.



NP1 anotação:
    Java:
    ✅ JVM (Java Virtual Machine) – Executa o código Java compilado (bytecode), permitindo que o Java rode em qualquer sistema operacional.

    ✅ JRE (Java Runtime Environment) – Contém a JVM + bibliotecas essenciais para rodar aplicações Java.

    ✅ JDK (Java Development Kit) – Inclui a JRE + ferramentas para desenvolvimento Java:

        javac (compilador)

        jar (empacotador)

        javadoc (geração de documentação)

        jdb (depurador)

    Tipos por Referência (Apontam para Objetos na Memória)
    String → String nome = "Java";

    Arrays → int[] numeros = {1, 2, 3};

    Objetos → Pessoa p = new Pessoa();

    ✅ Primitivos armazenam valores diretamente
    ✅ Referências armazenam um endereço de memória
    ✅ Modificar um objeto afeta todas as referências a ele
    
    tipos Primitivos:
            byte	    8 bits	    0
            short	    16 bits	    0
            int	        32 bits	    0
            long	    64 bits 	0L
            float	    32 bits	    0.0f
            double	    64 bits	    0.0d
            char	    16 bits	    '\u0000'
            boolean	     1 bit	    false

    Operadores:
        Aritméticos: + - * / %

        Relacionais: == != > < >= <=

        Lógicos: && || !

        Atribuição: = += -= *= /= %=

        Incremento/Decremento: ++ --

        Ternário: condição ? verdadeiro : falso
    
    🔹 static → Método/atributo pertence à classe, não ao objeto.
    🔹 void → Indica que um método não retorna valor.
    🔹 Construtor → Método especial que inicializa objetos, quandp a class é instanciada 
    🔹 Sobrecarga de Construtores → Vários construtores na mesma classe, com parâmetros diferentes.
    🔹 this → Referência ao próprio objeto.
    🔹 super → Chama um método ou construtor da superclasse (classe pai).

    Tipo de Sobrecarga	Exemplo
        Mudança no número de parâmetros	-> somar(int, int), somar(int, int, int)
        Mudança no tipo dos parâmetros	-> multiplicar(int, int), multiplicar(double, double)
        Mudança na ordem dos parâmetros -> imprimir(String, int), imprimir(int, String)

Pilares da POO
1️⃣ Abstração → 
2️⃣ Encapsulamento → Controle de acesso usando modificadores de acesso:

private → Apenas dentro da classe.

protected → Acesso na própria classe e subclasses.

public → Acesso de qualquer classe.
3️⃣ Herança → Uma classe pode herdar características de outra (classe pai → classe filha).

Usa extends:


4️⃣ Polimorfismo → Um método pode ter diferentes comportamentos:

Sobrecarga (Overloading) → Mesmo nome, diferentes parâmetros.

Sobrescrita (Overriding) → Substitui o método da classe pai.

✔ Exemplo de So
Outros Conceitos Importantes
Construtores
✅ Inicializam objetos quando a classe é instanciada.
✅ Possuem o mesmo nome da classe.
✅ Podem ter ou não parâmetros.

✔ Exemplo


Interfaces e Classes Abstratas
✅ Interface → Define métodos que devem ser implementados.
✅ Classe Abstrata → Pode ter métodos concretos e abstratos.

✔ Diferença

Característica	Interface	Classe Abstrata
Métodos	Apenas abstratos	Pode ter concretos e abstratos
Implementação	implements	extends
Herança múltipla	Sim	Não





    POO Pilares:
        Abstração -> Repartir o problema em partes, esconder detalhes internos e expor apenas o necessário.

        Emcapsulamento -> É o  controle de acesso usando os modificadores de acesso.
            ✔ private → Restringe o acesso apenas à própria classe.
            ✔ protected → Permite o acesso dentro da classe e de suas subclasses.
            ✔ public → Permite o acesso de qualquer classe.
               default -> somente class dentro do mesmo pacote 

        Herança -> Pertmite uma class herdar caracteristicas de outra class, Pai para Filho. 
            comando: extends

        Polimorfismo -> Capacidade de um metodo possuir diferentes comportamentos dependendo da implementação. 
            sobrecarga: Mesmo nome, diferentes atributos.
            sobrescrita: Redefinição en subclasses.

        Construtores -> Inicializa os obj com ou sem valores.   
            - publico
            - mesmo nome da class
            - com ou sem parametros 
            
        Class Abstratas:
            🔹 O que é uma Classe Abstrata em Java?
                Uma classe abstrata é uma classe que não pode ser instanciada diretamente e pode conter métodos abstratos (sem implementação) e métodos concretos (com implementação).

            📌 Principais Características:
                ✅ Pode ter métodos abstratos (que devem ser implementados pelas subclasses).
                ✅ Pode ter métodos concretos (com implementação).
                ✅ Não pode ser instanciada diretamente.
                ✅ Usa a palavra-chave abstract.
                ✅ É usada para definir um modelo base para outras classes.


                Quando usar classe abstrata? → Quando há uma relação de herança natural entre as classes.
                ✔ Quando usar interface? → Quando diferentes classes precisam seguir o mesmo comportamento sem herança direta.


        Interface -> Deficição de metodos que devem ser usados, quando implementada.

        Getters e Setters 
                getterts -> retorna o valor do atributo que esta "pegando" 
                setters -> devine um novo valor para o atributo 

        this, super, Overrede
            this -> Refere-se ao próprio objeto
            super -> Refere-se a superclasse(Pai)
            Overrade -> Indica q um metodo foi sobrecarregado.

